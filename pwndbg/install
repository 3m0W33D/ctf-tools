#!/bin/bash -ex

git clone --depth 1 https://github.com/pwndbg/pwndbg

source ctf-tools-venv-activate

PYTHON=''
INSTALLFLAGS=''

pushd pwndbg

git submodule update --init --recursive

PYVER=$(gdb -batch -q --nx -ex 'pi import platform; print(".".join(platform.python_version_tuple()[:2]))')
PYTHON+=$(gdb -batch -q --nx -ex 'pi import sys; print(sys.executable)')
PYTHON+="${PYVER}"

# Find the Python site-packages that we need to use so that
# GDB can find the files once we've installed them.
if linux && [ -z "$INSTALLFLAGS"  ]; then
    SITE_PACKAGES=$(gdb -batch -q --nx -ex 'pi import site; print(site.getsitepackages()[0])')
        INSTALLFLAGS="--target ${SITE_PACKAGES}"
fi

# Make sure that pip is available
if ! ${PYTHON} -m pip -V; then
        ${PYTHON} -m ensurepip ${INSTALLFLAGS} --upgrade
fi

# Upgrade pip itself
${PYTHON} -m pip install ${INSTALLFLAGS} --upgrade pip

# Install Python dependencies
${PYTHON} -m pip install ${INSTALLFLAGS} -Ur requirements.txt

pip install -Ur ./requirements.txt

popd

mkdir bin
cat >> bin/gdb-pwndbg <<EOF
#!/bin/sh
exec gdb -q -ex init-pwndbg "\$@"
EOF
chmod +rx bin/gdb-pwndbg

cd pwndbg
# make sure gdbinit exists
touch ~/.gdbinit
if ! grep "init-pwndbg" ~/.gdbinit; then
    cat >> ~/.gdbinit <<EOF

####
# added by ctf-tools
define init-pwndbg
    source $PWD/gdbinit.py
end
document init-pwndbg
    Initializes the pwndbg gdb extension (https://github.com/pwndbg/pwndbg)
end
####

EOF
fi
